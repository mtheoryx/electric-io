b4f29b3b13595402998cc46fc49688a6
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = pickTextColorBasedOnBgColor;

var _colorNames = require('./colorNames.js');

var _colorNames2 = _interopRequireDefault(_colorNames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// default export function source: https://stackoverflow.com/a/41491220
// I modified it a little bit and wrote the parsing functions below it.
// this function takes a hex color code and figures out whether whether a dark or light color should be laid over the top of it
// - noopkat

function pickTextColorBasedOnBgColor(bgColor, lightColor, darkColor) {
  if (!bgColor) return '#000000';

  var _parseColor = parseColor(bgColor),
      r = _parseColor.r,
      g = _parseColor.g,
      b = _parseColor.b;

  var uicolors = [r / 255, g / 255, b / 255];
  var c = uicolors.map(function (col) {
    if (col <= 0.03928) {
      return col / 12.92;
    }
    return Math.pow((col + 0.055) / 1.055, 2.4);
  });
  var L = 0.2126 * c[0] + 0.7152 * c[1] + 0.0722 * c[2];
  return L > 0.179 ? darkColor : lightColor;
}

function parseColor(color) {
  if (color.charAt(0) === '#') return parseHex(color);
  if (color.toLowerCase().indexOf('rgb') === 0) return parseRGB(color);else return parseName(color);
}

function parseHex(color) {
  // #ff00de
  // support for 3 character hex strings would be nice :)
  // pull request me if you like - noopkat
  var justColor = color.substring(1, 7);
  var r = parseInt(justColor.substring(0, 2), 16); // hexToR
  var g = parseInt(justColor.substring(2, 4), 16); // hexToG
  var b = parseInt(justColor.substring(4, 6), 16); // hexToB
  return { r: r, g: g, b: b };
}

function parseRGB(color) {
  // rgb(23,255,8)
  var justColor = color.substring(4, color.length - 1).replace(/\s/g, '');
  var colorParts = justColor.split(',').map(function (n) {
    return parseInt(n);
  });
  return { r: colorParts[0], g: colorParts[1], b: colorParts[2] };
}

function parseName(color) {
  // papayawhip or Papaya Whip
  var justColor = color.replace(/\s/g, '').toLowerCase();
  var hexColor = _colorNames2.default[color];
  return parseHex(hexColor);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbG9yQ29udHJhc3Rlci5qcyJdLCJuYW1lcyI6WyJwaWNrVGV4dENvbG9yQmFzZWRPbkJnQ29sb3IiLCJiZ0NvbG9yIiwibGlnaHRDb2xvciIsImRhcmtDb2xvciIsInBhcnNlQ29sb3IiLCJyIiwiZyIsImIiLCJ1aWNvbG9ycyIsImMiLCJtYXAiLCJjb2wiLCJNYXRoIiwicG93IiwiTCIsImNvbG9yIiwiY2hhckF0IiwicGFyc2VIZXgiLCJ0b0xvd2VyQ2FzZSIsImluZGV4T2YiLCJwYXJzZVJHQiIsInBhcnNlTmFtZSIsImp1c3RDb2xvciIsInN1YnN0cmluZyIsInBhcnNlSW50IiwibGVuZ3RoIiwicmVwbGFjZSIsImNvbG9yUGFydHMiLCJzcGxpdCIsIm4iLCJoZXhDb2xvciIsImNvbG9yTmFtZXMiXSwibWFwcGluZ3MiOiI7Ozs7O2tCQU93QkEsMkI7O0FBUHhCOzs7Ozs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZSxTQUFTQSwyQkFBVCxDQUFxQ0MsT0FBckMsRUFBOENDLFVBQTlDLEVBQTBEQyxTQUExRCxFQUFxRTtBQUNsRixNQUFJLENBQUNGLE9BQUwsRUFBYyxPQUFPLFNBQVA7O0FBRG9FLG9CQUVsRUcsV0FBV0gsT0FBWCxDQUZrRTtBQUFBLE1BRTNFSSxDQUYyRSxlQUUzRUEsQ0FGMkU7QUFBQSxNQUV6RUMsQ0FGeUUsZUFFekVBLENBRnlFO0FBQUEsTUFFdkVDLENBRnVFLGVBRXZFQSxDQUZ1RTs7QUFHbEYsTUFBTUMsV0FBVyxDQUFDSCxJQUFJLEdBQUwsRUFBVUMsSUFBSSxHQUFkLEVBQW1CQyxJQUFJLEdBQXZCLENBQWpCO0FBQ0EsTUFBTUUsSUFBSUQsU0FBU0UsR0FBVCxDQUFhLFVBQUNDLEdBQUQsRUFBUztBQUM5QixRQUFJQSxPQUFPLE9BQVgsRUFBb0I7QUFDbEIsYUFBT0EsTUFBTSxLQUFiO0FBQ0Q7QUFDRCxXQUFPQyxLQUFLQyxHQUFMLENBQVMsQ0FBQ0YsTUFBTSxLQUFQLElBQWdCLEtBQXpCLEVBQWdDLEdBQWhDLENBQVA7QUFDRCxHQUxTLENBQVY7QUFNQSxNQUFNRyxJQUFLLFNBQVNMLEVBQUUsQ0FBRixDQUFWLEdBQW1CLFNBQVNBLEVBQUUsQ0FBRixDQUE1QixHQUFxQyxTQUFTQSxFQUFFLENBQUYsQ0FBeEQ7QUFDQSxTQUFRSyxJQUFJLEtBQUwsR0FBY1gsU0FBZCxHQUEwQkQsVUFBakM7QUFDRDs7QUFFRCxTQUFTRSxVQUFULENBQW9CVyxLQUFwQixFQUEyQjtBQUN6QixNQUFJQSxNQUFNQyxNQUFOLENBQWEsQ0FBYixNQUFvQixHQUF4QixFQUE2QixPQUFPQyxTQUFTRixLQUFULENBQVA7QUFDN0IsTUFBSUEsTUFBTUcsV0FBTixHQUFvQkMsT0FBcEIsQ0FBNEIsS0FBNUIsTUFBdUMsQ0FBM0MsRUFBOEMsT0FBT0MsU0FBU0wsS0FBVCxDQUFQLENBQTlDLEtBQ0ssT0FBT00sVUFBVU4sS0FBVixDQUFQO0FBQ047O0FBRUQsU0FBU0UsUUFBVCxDQUFrQkYsS0FBbEIsRUFBeUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0EsTUFBTU8sWUFBWVAsTUFBTVEsU0FBTixDQUFnQixDQUFoQixFQUFtQixDQUFuQixDQUFsQjtBQUNBLE1BQU1sQixJQUFJbUIsU0FBU0YsVUFBVUMsU0FBVixDQUFvQixDQUFwQixFQUF1QixDQUF2QixDQUFULEVBQW9DLEVBQXBDLENBQVYsQ0FMdUIsQ0FLNEI7QUFDbkQsTUFBTWpCLElBQUlrQixTQUFTRixVQUFVQyxTQUFWLENBQW9CLENBQXBCLEVBQXVCLENBQXZCLENBQVQsRUFBb0MsRUFBcEMsQ0FBVixDQU51QixDQU00QjtBQUNuRCxNQUFNaEIsSUFBSWlCLFNBQVNGLFVBQVVDLFNBQVYsQ0FBb0IsQ0FBcEIsRUFBdUIsQ0FBdkIsQ0FBVCxFQUFvQyxFQUFwQyxDQUFWLENBUHVCLENBTzRCO0FBQ25ELFNBQU8sRUFBQ2xCLElBQUQsRUFBR0MsSUFBSCxFQUFLQyxJQUFMLEVBQVA7QUFDRDs7QUFFRCxTQUFTYSxRQUFULENBQWtCTCxLQUFsQixFQUF5QjtBQUN2QjtBQUNBLE1BQU1PLFlBQVlQLE1BQU1RLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUJSLE1BQU1VLE1BQU4sR0FBYyxDQUFqQyxFQUFvQ0MsT0FBcEMsQ0FBNEMsS0FBNUMsRUFBbUQsRUFBbkQsQ0FBbEI7QUFDQSxNQUFNQyxhQUFhTCxVQUFVTSxLQUFWLENBQWdCLEdBQWhCLEVBQXFCbEIsR0FBckIsQ0FBeUIsVUFBQ21CLENBQUQ7QUFBQSxXQUFPTCxTQUFTSyxDQUFULENBQVA7QUFBQSxHQUF6QixDQUFuQjtBQUNBLFNBQU8sRUFBQ3hCLEdBQUdzQixXQUFXLENBQVgsQ0FBSixFQUFtQnJCLEdBQUdxQixXQUFXLENBQVgsQ0FBdEIsRUFBcUNwQixHQUFHb0IsV0FBVyxDQUFYLENBQXhDLEVBQVA7QUFDRDs7QUFFRCxTQUFTTixTQUFULENBQW1CTixLQUFuQixFQUEwQjtBQUN4QjtBQUNBLE1BQU1PLFlBQVlQLE1BQU1XLE9BQU4sQ0FBYyxLQUFkLEVBQXFCLEVBQXJCLEVBQXlCUixXQUF6QixFQUFsQjtBQUNBLE1BQU1ZLFdBQVdDLHFCQUFXaEIsS0FBWCxDQUFqQjtBQUNBLFNBQU9FLFNBQVNhLFFBQVQsQ0FBUDtBQUNEIiwiZmlsZSI6ImNvbG9yQ29udHJhc3Rlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjb2xvck5hbWVzIGZyb20gJy4vY29sb3JOYW1lcy5qcyc7XG5cbi8vIGRlZmF1bHQgZXhwb3J0IGZ1bmN0aW9uIHNvdXJjZTogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQxNDkxMjIwXG4vLyBJIG1vZGlmaWVkIGl0IGEgbGl0dGxlIGJpdCBhbmQgd3JvdGUgdGhlIHBhcnNpbmcgZnVuY3Rpb25zIGJlbG93IGl0LlxuLy8gdGhpcyBmdW5jdGlvbiB0YWtlcyBhIGhleCBjb2xvciBjb2RlIGFuZCBmaWd1cmVzIG91dCB3aGV0aGVyIHdoZXRoZXIgYSBkYXJrIG9yIGxpZ2h0IGNvbG9yIHNob3VsZCBiZSBsYWlkIG92ZXIgdGhlIHRvcCBvZiBpdFxuLy8gLSBub29wa2F0XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBpY2tUZXh0Q29sb3JCYXNlZE9uQmdDb2xvcihiZ0NvbG9yLCBsaWdodENvbG9yLCBkYXJrQ29sb3IpIHtcbiAgaWYgKCFiZ0NvbG9yKSByZXR1cm4gJyMwMDAwMDAnO1xuICBjb25zdCB7cixnLGJ9ID0gcGFyc2VDb2xvcihiZ0NvbG9yKTtcbiAgY29uc3QgdWljb2xvcnMgPSBbciAvIDI1NSwgZyAvIDI1NSwgYiAvIDI1NV07XG4gIGNvbnN0IGMgPSB1aWNvbG9ycy5tYXAoKGNvbCkgPT4ge1xuICAgIGlmIChjb2wgPD0gMC4wMzkyOCkge1xuICAgICAgcmV0dXJuIGNvbCAvIDEyLjkyO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5wb3coKGNvbCArIDAuMDU1KSAvIDEuMDU1LCAyLjQpO1xuICB9KTtcbiAgY29uc3QgTCA9ICgwLjIxMjYgKiBjWzBdKSArICgwLjcxNTIgKiBjWzFdKSArICgwLjA3MjIgKiBjWzJdKTtcbiAgcmV0dXJuIChMID4gMC4xNzkpID8gZGFya0NvbG9yIDogbGlnaHRDb2xvcjtcbn1cblxuZnVuY3Rpb24gcGFyc2VDb2xvcihjb2xvcikge1xuICBpZiAoY29sb3IuY2hhckF0KDApID09PSAnIycpIHJldHVybiBwYXJzZUhleChjb2xvcik7XG4gIGlmIChjb2xvci50b0xvd2VyQ2FzZSgpLmluZGV4T2YoJ3JnYicpID09PSAwKSByZXR1cm4gcGFyc2VSR0IoY29sb3IpO1xuICBlbHNlIHJldHVybiBwYXJzZU5hbWUoY29sb3IpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUhleChjb2xvcikge1xuICAvLyAjZmYwMGRlXG4gIC8vIHN1cHBvcnQgZm9yIDMgY2hhcmFjdGVyIGhleCBzdHJpbmdzIHdvdWxkIGJlIG5pY2UgOilcbiAgLy8gcHVsbCByZXF1ZXN0IG1lIGlmIHlvdSBsaWtlIC0gbm9vcGthdFxuICBjb25zdCBqdXN0Q29sb3IgPSBjb2xvci5zdWJzdHJpbmcoMSwgNyk7XG4gIGNvbnN0IHIgPSBwYXJzZUludChqdXN0Q29sb3Iuc3Vic3RyaW5nKDAsIDIpLCAxNik7IC8vIGhleFRvUlxuICBjb25zdCBnID0gcGFyc2VJbnQoanVzdENvbG9yLnN1YnN0cmluZygyLCA0KSwgMTYpOyAvLyBoZXhUb0dcbiAgY29uc3QgYiA9IHBhcnNlSW50KGp1c3RDb2xvci5zdWJzdHJpbmcoNCwgNiksIDE2KTsgLy8gaGV4VG9CXG4gIHJldHVybiB7cixnLGJ9O1xufVxuXG5mdW5jdGlvbiBwYXJzZVJHQihjb2xvcikge1xuICAvLyByZ2IoMjMsMjU1LDgpXG4gIGNvbnN0IGp1c3RDb2xvciA9IGNvbG9yLnN1YnN0cmluZyg0LCBjb2xvci5sZW5ndGggLTEpLnJlcGxhY2UoL1xccy9nLCAnJyk7XG4gIGNvbnN0IGNvbG9yUGFydHMgPSBqdXN0Q29sb3Iuc3BsaXQoJywnKS5tYXAoKG4pID0+IHBhcnNlSW50KG4pKTsgXG4gIHJldHVybiB7cjogY29sb3JQYXJ0c1swXSwgZzogY29sb3JQYXJ0c1sxXSwgYjogY29sb3JQYXJ0c1syXX07XG59XG5cbmZ1bmN0aW9uIHBhcnNlTmFtZShjb2xvcikge1xuICAvLyBwYXBheWF3aGlwIG9yIFBhcGF5YSBXaGlwXG4gIGNvbnN0IGp1c3RDb2xvciA9IGNvbG9yLnJlcGxhY2UoL1xccy9nLCAnJykudG9Mb3dlckNhc2UoKTtcbiAgY29uc3QgaGV4Q29sb3IgPSBjb2xvck5hbWVzW2NvbG9yXTtcbiAgcmV0dXJuIHBhcnNlSGV4KGhleENvbG9yKTtcbn1cblxuIl19
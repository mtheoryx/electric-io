{"version":3,"sources":["colorContraster.js"],"names":["pickTextColorBasedOnBgColor","bgColor","lightColor","darkColor","parseColor","r","g","b","uicolors","c","map","col","Math","pow","L","color","charAt","parseHex","toLowerCase","indexOf","parseRGB","parseName","justColor","substring","parseInt","length","replace","colorParts","split","n","hexColor","colorNames"],"mappings":";;;;;kBAOwBA,2B;;AAPxB;;;;;;AAEA;AACA;AACA;AACA;;AAEe,SAASA,2BAAT,CAAqCC,OAArC,EAA8CC,UAA9C,EAA0DC,SAA1D,EAAqE;AAClF,MAAI,CAACF,OAAL,EAAc,OAAO,SAAP;;AADoE,oBAElEG,WAAWH,OAAX,CAFkE;AAAA,MAE3EI,CAF2E,eAE3EA,CAF2E;AAAA,MAEzEC,CAFyE,eAEzEA,CAFyE;AAAA,MAEvEC,CAFuE,eAEvEA,CAFuE;;AAGlF,MAAMC,WAAW,CAACH,IAAI,GAAL,EAAUC,IAAI,GAAd,EAAmBC,IAAI,GAAvB,CAAjB;AACA,MAAME,IAAID,SAASE,GAAT,CAAa,UAACC,GAAD,EAAS;AAC9B,QAAIA,OAAO,OAAX,EAAoB;AAClB,aAAOA,MAAM,KAAb;AACD;AACD,WAAOC,KAAKC,GAAL,CAAS,CAACF,MAAM,KAAP,IAAgB,KAAzB,EAAgC,GAAhC,CAAP;AACD,GALS,CAAV;AAMA,MAAMG,IAAK,SAASL,EAAE,CAAF,CAAV,GAAmB,SAASA,EAAE,CAAF,CAA5B,GAAqC,SAASA,EAAE,CAAF,CAAxD;AACA,SAAQK,IAAI,KAAL,GAAcX,SAAd,GAA0BD,UAAjC;AACD;;AAED,SAASE,UAAT,CAAoBW,KAApB,EAA2B;AACzB,MAAIA,MAAMC,MAAN,CAAa,CAAb,MAAoB,GAAxB,EAA6B,OAAOC,SAASF,KAAT,CAAP;AAC7B,MAAIA,MAAMG,WAAN,GAAoBC,OAApB,CAA4B,KAA5B,MAAuC,CAA3C,EAA8C,OAAOC,SAASL,KAAT,CAAP,CAA9C,KACK,OAAOM,UAAUN,KAAV,CAAP;AACN;;AAED,SAASE,QAAT,CAAkBF,KAAlB,EAAyB;AACvB;AACA;AACA;AACA,MAAMO,YAAYP,MAAMQ,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,CAAlB;AACA,MAAMlB,IAAImB,SAASF,UAAUC,SAAV,CAAoB,CAApB,EAAuB,CAAvB,CAAT,EAAoC,EAApC,CAAV,CALuB,CAK4B;AACnD,MAAMjB,IAAIkB,SAASF,UAAUC,SAAV,CAAoB,CAApB,EAAuB,CAAvB,CAAT,EAAoC,EAApC,CAAV,CANuB,CAM4B;AACnD,MAAMhB,IAAIiB,SAASF,UAAUC,SAAV,CAAoB,CAApB,EAAuB,CAAvB,CAAT,EAAoC,EAApC,CAAV,CAPuB,CAO4B;AACnD,SAAO,EAAClB,IAAD,EAAGC,IAAH,EAAKC,IAAL,EAAP;AACD;;AAED,SAASa,QAAT,CAAkBL,KAAlB,EAAyB;AACvB;AACA,MAAMO,YAAYP,MAAMQ,SAAN,CAAgB,CAAhB,EAAmBR,MAAMU,MAAN,GAAc,CAAjC,EAAoCC,OAApC,CAA4C,KAA5C,EAAmD,EAAnD,CAAlB;AACA,MAAMC,aAAaL,UAAUM,KAAV,CAAgB,GAAhB,EAAqBlB,GAArB,CAAyB,UAACmB,CAAD;AAAA,WAAOL,SAASK,CAAT,CAAP;AAAA,GAAzB,CAAnB;AACA,SAAO,EAACxB,GAAGsB,WAAW,CAAX,CAAJ,EAAmBrB,GAAGqB,WAAW,CAAX,CAAtB,EAAqCpB,GAAGoB,WAAW,CAAX,CAAxC,EAAP;AACD;;AAED,SAASN,SAAT,CAAmBN,KAAnB,EAA0B;AACxB;AACA,MAAMO,YAAYP,MAAMW,OAAN,CAAc,KAAd,EAAqB,EAArB,EAAyBR,WAAzB,EAAlB;AACA,MAAMY,WAAWC,qBAAWhB,KAAX,CAAjB;AACA,SAAOE,SAASa,QAAT,CAAP;AACD","file":"colorContraster.js","sourcesContent":["import colorNames from './colorNames.js';\n\n// default export function source: https://stackoverflow.com/a/41491220\n// I modified it a little bit and wrote the parsing functions below it.\n// this function takes a hex color code and figures out whether whether a dark or light color should be laid over the top of it\n// - noopkat\n\nexport default function pickTextColorBasedOnBgColor(bgColor, lightColor, darkColor) {\n  if (!bgColor) return '#000000';\n  const {r,g,b} = parseColor(bgColor);\n  const uicolors = [r / 255, g / 255, b / 255];\n  const c = uicolors.map((col) => {\n    if (col <= 0.03928) {\n      return col / 12.92;\n    }\n    return Math.pow((col + 0.055) / 1.055, 2.4);\n  });\n  const L = (0.2126 * c[0]) + (0.7152 * c[1]) + (0.0722 * c[2]);\n  return (L > 0.179) ? darkColor : lightColor;\n}\n\nfunction parseColor(color) {\n  if (color.charAt(0) === '#') return parseHex(color);\n  if (color.toLowerCase().indexOf('rgb') === 0) return parseRGB(color);\n  else return parseName(color);\n}\n\nfunction parseHex(color) {\n  // #ff00de\n  // support for 3 character hex strings would be nice :)\n  // pull request me if you like - noopkat\n  const justColor = color.substring(1, 7);\n  const r = parseInt(justColor.substring(0, 2), 16); // hexToR\n  const g = parseInt(justColor.substring(2, 4), 16); // hexToG\n  const b = parseInt(justColor.substring(4, 6), 16); // hexToB\n  return {r,g,b};\n}\n\nfunction parseRGB(color) {\n  // rgb(23,255,8)\n  const justColor = color.substring(4, color.length -1).replace(/\\s/g, '');\n  const colorParts = justColor.split(',').map((n) => parseInt(n)); \n  return {r: colorParts[0], g: colorParts[1], b: colorParts[2]};\n}\n\nfunction parseName(color) {\n  // papayawhip or Papaya Whip\n  const justColor = color.replace(/\\s/g, '').toLowerCase();\n  const hexColor = colorNames[color];\n  return parseHex(hexColor);\n}\n\n"]}